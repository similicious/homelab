services:
  dawarich_redis:
    image: redis:7.4-alpine
    container_name: dawarich-redis
    command: redis-server
    networks:
      - app
    volumes:
      - "{{ dawarich_shared_dir }}:/data"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  dawarich_db:
    image: postgis/postgis:17-3.5-alpine
    shm_size: 1G
    container_name: dawarich-db
    volumes:
      - "{{ dawarich_db_dir }}:/var/lib/postgresql/data"
      - "{{ dawarich_shared_dir }}:/var/shared"
      # - ./postgresql.conf:/etc/postgresql/postgresql.conf # Optional, uncomment if you want to use a custom config
    networks:
      - app
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 4ba4159527b50a226a931f5ab9f2710f0bb2e53d0fa68cc4a54a3dd9bf5dbe96
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dawarich_development"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    # command: postgres -c config_file=/etc/postgresql/postgresql.conf # Use custom config, uncomment if you want to use a custom config

  dawarich_app:
    image: freikin/dawarich:latest
    container_name: dawarich-app
    volumes:
      - "{{ dawarich_public_dir }}:/var/app/public"
      - "{{ dawarich_watched_dir }}:/var/app/tmp/imports/watched"
      - "{{ dawarich_storage_dir }}:/var/app/storage"
    networks:
      - app
      - traefik
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ["bin/rails", "server", "-p", "3000", "-b", "::"]
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: 4ba4159527b50a226a931f5ab9f2710f0bb2e53d0fa68cc4a54a3dd9bf5dbe96
      DATABASE_NAME: dawarich_development
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOSTS: "dawarich.{{ public_domain }},localhost"
      TIME_ZONE: Europe/London
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
      # PHOTON_API_HOST: photon.komoot.io
      # PHOTON_API_USE_HTTPS: true # or false if you want to use HTTP instead of HTTPS
    labels:
      traefik.enable: "true"
      traefik.http.routers.dawarich.rule: "Host(`dawarich.{{ public_domain }}`) && {{ traefik_internal_client_ip_v3 }}"
      traefik.http.services.dawarich.loadbalancer.server.port: "3000"
      traefik.docker.network: "{{ traefik_network_name }}"
      # traefik.http.routers.dawarich.middlewares: "authelia@docker"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'",
        ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
    deploy:
      resources:
        limits:
          cpus: "0.50" # Limit CPU usage to 50% of one core
          memory: "4G" # Limit memory usage to 4GB

  dawarich_sidekiq:
    image: freikin/dawarich:latest
    container_name: dawarich-sidekiq
    volumes:
      - "{{ dawarich_public_dir }}:/var/app/public"
      - "{{ dawarich_watched_dir }}:/var/app/tmp/imports/watched"
      - "{{ dawarich_storage_dir }}:/var/app/storage"
    networks:
      - app
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ["sidekiq"]
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: 4ba4159527b50a226a931f5ab9f2710f0bb2e53d0fa68cc4a54a3dd9bf5dbe96
      DATABASE_NAME: dawarich_development
      APPLICATION_HOSTS: "dawarich.{{ public_domain }},localhost"
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: dawarich_app
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
      # PHOTON_API_HOST: photon.komoot.io
      # PHOTON_API_USE_HTTPS: true # or false if you want to use HTTP instead of HTTPS
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f sidekiq"]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
      dawarich_app:
        condition: service_healthy
        restart: true

networks:
  app:
  traefik:
    external: true
