#
# WARNING: To install Immich, follow our guide: https://docs.immich.app/install/docker-compose
#
# Make sure to use the docker-compose.yml of the current release:
#
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# The compose file on main may not be compatible with the latest release.

name: immich

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    depends_on:
      - redis
      - database
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.immich.rule: "Host(`{{ service_name }}.{{ public_domain }}`)  && {{ traefik_internal_client_ip_v3 }}"
      traefik.http.services.immich.loadbalancer.server.port: "2283"
      traefik.docker.network: "{{ traefik_network_name }}"
    healthcheck:
      disable: false
    networks:
      - app
      - "{{ traefik_network_name }}"

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://docs.immich.app/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - "{{ immich_app_model_cache_dir }}:/cache"
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      disable: false
    networks:
      - app

  redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:fea8b3e67b15729d4bb70589eb03367bab9ad1ee89c876f54327fc7c6e618571
    healthcheck:
      test: redis-cli ping || exit 1
    restart: unless-stopped
    networks:
      - app

  database:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:41eacbe83eca995561fe43814fd4891e16e39632806253848efaf04d3c8a8b84
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
      # DB_STORAGE_TYPE: 'HDD'
    volumes:
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    shm_size: 128mb
    restart: unless-stopped
    networks:
      - app

  immich-drop:
    image: ghcr.io/nasogaa/immich-drop:latest
    container_name: immich-drop
    restart: unless-stopped
    environment:
      IMMICH_BASE_URL: http://immich_server:2283/api
      IMMICH_API_KEY: "{{ vault_immich_drop_api_key }}"
      IMMICH_ALBUM_NAME: Drop
      PUBLIC_UPLOAD_PAGE_ENABLED: "true" # keep disabled by default
      PUBLIC_BASE_URL: https://drop.{{ public_domain }}
      CHUNKED_UPLOADS_ENABLED: "false" # enable chunked uploads
      CHUNK_SIZE_MB: "95" # per-chunk size (MB)
      SESSION_SECRET: "{{ vault_immich_drop_session_secret }}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.immichdrop.rule: "Host(`drop.{{ public_domain }}`)"
      traefik.http.services.immichdrop.loadbalancer.server.port: "8080"
    volumes:
      - "{{ immich_drop_dir }}:/data"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - <<'PY'\nimport os,urllib.request,sys; url=f\"http://127.0.0.1:{os.getenv('PORT','8080')}/\";\ntry: urllib.request.urlopen(url, timeout=3); sys.exit(0)\nexcept Exception: sys.exit(1)\nPY",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - "{{ traefik_network_name }}"

networks:
  app:
  traefik:
    external: true
